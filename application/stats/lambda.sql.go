// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: lambda.sql

package stats

import (
	"context"
	"time"
)

const addLambdaStat = `-- name: AddLambdaStat :exec
INSERT INTO lambda_stat(project, name, started_at, finished_at, environment, error)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id
`

type AddLambdaStatParams struct {
	Project     string    `json:"project"`
	Name        string    `json:"name"`
	StartedAt   time.Time `json:"started_at"`
	FinishedAt  time.Time `json:"finished_at"`
	Environment string    `json:"environment"`
	Error       string    `json:"error"`
}

func (q *Queries) AddLambdaStat(ctx context.Context, arg AddLambdaStatParams) error {
	_, err := q.db.ExecContext(ctx, addLambdaStat,
		arg.Project,
		arg.Name,
		arg.StartedAt,
		arg.FinishedAt,
		arg.Environment,
		arg.Error,
	)
	return err
}

const gCLambdaStats = `-- name: GCLambdaStats :exec
DELETE
FROM lambda_stat
WHERE started_at < ?
`

func (q *Queries) GCLambdaStats(ctx context.Context, startedAt time.Time) error {
	_, err := q.db.ExecContext(ctx, gCLambdaStats, startedAt)
	return err
}

const listLambdaStats = `-- name: ListLambdaStats :many
SELECT id, project, name, started_at, finished_at, environment, error
FROM lambda_stat
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type ListLambdaStatsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListLambdaStats(ctx context.Context, arg ListLambdaStatsParams) ([]LambdaStat, error) {
	rows, err := q.db.QueryContext(ctx, listLambdaStats, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LambdaStat{}
	for rows.Next() {
		var i LambdaStat
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Name,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Environment,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectLambdaStats = `-- name: ListProjectLambdaStats :many
SELECT id, project, name, started_at, finished_at, environment, error
FROM lambda_stat
WHERE project = ?
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type ListProjectLambdaStatsParams struct {
	Project string `json:"project"`
	Limit   int64  `json:"limit"`
	Offset  int64  `json:"offset"`
}

func (q *Queries) ListProjectLambdaStats(ctx context.Context, arg ListProjectLambdaStatsParams) ([]LambdaStat, error) {
	rows, err := q.db.QueryContext(ctx, listProjectLambdaStats, arg.Project, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LambdaStat{}
	for rows.Next() {
		var i LambdaStat
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Name,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Environment,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectSpecificLambdaStats = `-- name: ListProjectSpecificLambdaStats :many
SELECT id, project, name, started_at, finished_at, environment, error
FROM lambda_stat
WHERE project = ?
  AND name = ?
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type ListProjectSpecificLambdaStatsParams struct {
	Project string `json:"project"`
	Name    string `json:"name"`
	Limit   int64  `json:"limit"`
	Offset  int64  `json:"offset"`
}

func (q *Queries) ListProjectSpecificLambdaStats(ctx context.Context, arg ListProjectSpecificLambdaStatsParams) ([]LambdaStat, error) {
	rows, err := q.db.QueryContext(ctx, listProjectSpecificLambdaStats,
		arg.Project,
		arg.Name,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LambdaStat{}
	for rows.Next() {
		var i LambdaStat
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Name,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Environment,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
