// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: cron.sql

package stats

import (
	"context"
	"time"
)

const addCronStat = `-- name: AddCronStat :exec
INSERT INTO cron_stat(project, expression, started_at, finished_at, error)
VALUES (?, ?, ?, ?, ?)
RETURNING id
`

type AddCronStatParams struct {
	Project    string    `json:"project"`
	Expression string    `json:"expression"`
	StartedAt  time.Time `json:"started_at"`
	FinishedAt time.Time `json:"finished_at"`
	Error      string    `json:"error"`
}

func (q *Queries) AddCronStat(ctx context.Context, arg AddCronStatParams) error {
	_, err := q.db.ExecContext(ctx, addCronStat,
		arg.Project,
		arg.Expression,
		arg.StartedAt,
		arg.FinishedAt,
		arg.Error,
	)
	return err
}

const gCCronStats = `-- name: GCCronStats :exec
DELETE
FROM cron_stat
WHERE started_at < ?
`

func (q *Queries) GCCronStats(ctx context.Context, startedAt time.Time) error {
	_, err := q.db.ExecContext(ctx, gCCronStats, startedAt)
	return err
}

const listCronStats = `-- name: ListCronStats :many
SELECT id, project, expression, started_at, finished_at, error
FROM cron_stat
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type ListCronStatsParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListCronStats(ctx context.Context, arg ListCronStatsParams) ([]CronStat, error) {
	rows, err := q.db.QueryContext(ctx, listCronStats, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CronStat{}
	for rows.Next() {
		var i CronStat
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Expression,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectCronStats = `-- name: ListProjectCronStats :many
SELECT id, project, expression, started_at, finished_at, error
FROM cron_stat
WHERE project = ?
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type ListProjectCronStatsParams struct {
	Project string `json:"project"`
	Limit   int64  `json:"limit"`
	Offset  int64  `json:"offset"`
}

func (q *Queries) ListProjectCronStats(ctx context.Context, arg ListProjectCronStatsParams) ([]CronStat, error) {
	rows, err := q.db.QueryContext(ctx, listProjectCronStats, arg.Project, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CronStat{}
	for rows.Next() {
		var i CronStat
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Expression,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectSpecificCronStats = `-- name: ListProjectSpecificCronStats :many
SELECT id, project, expression, started_at, finished_at, error
FROM cron_stat
WHERE project = ? AND expression = ?
ORDER BY id DESC
LIMIT ? OFFSET ?
`

type ListProjectSpecificCronStatsParams struct {
	Project    string `json:"project"`
	Expression string `json:"expression"`
	Limit      int64  `json:"limit"`
	Offset     int64  `json:"offset"`
}

func (q *Queries) ListProjectSpecificCronStats(ctx context.Context, arg ListProjectSpecificCronStatsParams) ([]CronStat, error) {
	rows, err := q.db.QueryContext(ctx, listProjectSpecificCronStats,
		arg.Project,
		arg.Expression,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CronStat{}
	for rows.Next() {
		var i CronStat
		if err := rows.Scan(
			&i.ID,
			&i.Project,
			&i.Expression,
			&i.StartedAt,
			&i.FinishedAt,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
